/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com;

import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.player.MediaPlayerFactory;
import uk.co.caprica.vlcj.player.embedded.DefaultFullScreenStrategy;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.player.embedded.videosurface.CanvasVideoSurface;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;

/**
 *
 * @author Ikmal
 */
public class Main extends javax.swing.JFrame {

    private static String MEDIA_FILE_PATH = "C:\\Users\\Ikmal\\Videos\\vickyzaskia.mp4";
    private static String VLC_INSTALL_PATH = "C:\\Program Files\\VideoLAN\\VLC";
    private static EmbeddedMediaPlayer player;
    SubTableModel model = new SubTableModel();
    private static JFileChooser fChooser = new JFileChooser();
    private Image image;

    /**
     * Creates new form Main
     */
    public Main() {
        try {
            image = ImageIO.read(getClass().getResource("/com/images/minisub.png"));
        } catch (IOException e) {
        }

        initComponents();
        setLocationRelativeTo(null);

        // Load library
        NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(), VLC_INSTALL_PATH);
        Native.loadLibrary(RuntimeUtil.getLibVlcLibraryName(), LibVlc.class);

        // Initialize the media player
        MediaPlayerFactory mediaPlayerFactory = new MediaPlayerFactory();
        DefaultFullScreenStrategy fsStrat = new DefaultFullScreenStrategy(this);

        CanvasVideoSurface videoSurface = mediaPlayerFactory.newVideoSurface(canvas);
        player = mediaPlayerFactory.newEmbeddedMediaPlayer(fsStrat);
        player.setVideoSurface(videoSurface);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new java.awt.Canvas();
        pControl = new javax.swing.JPanel();
        lPlay = new javax.swing.JLabel();
        lStop = new javax.swing.JLabel();
        lAdd = new javax.swing.JLabel();
        lDelete = new javax.swing.JLabel();
        lStart = new javax.swing.JLabel();
        lEnd = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tStart = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tEnd = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tSub = new javax.swing.JTextArea();
        lCancel = new javax.swing.JLabel();
        lSave = new javax.swing.JLabel();
        cMusic = new javax.swing.JCheckBox();
        lMusic = new javax.swing.JLabel();
        pSubtitle = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabSub = new JTable();
        lOpenFile = new javax.swing.JLabel();
        lOpenLibrary = new javax.swing.JLabel();
        pbPlayer = new javax.swing.JProgressBar();
        lTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiniSub");
        setIconImage(image);
        setResizable(false);

        canvas.setBackground(new java.awt.Color(255, 255, 255));
        canvas.setMinimumSize(new java.awt.Dimension(480, 320));

        pControl.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        lPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/play.png"))); // NOI18N
        lPlay.setToolTipText("Play/Pause");
        lPlay.setMaximumSize(new java.awt.Dimension(22, 22));
        lPlay.setMinimumSize(new java.awt.Dimension(22, 22));
        lPlay.setPreferredSize(new java.awt.Dimension(22, 22));
        lPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lPlayMouseClicked(evt);
            }
        });

        lStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/stop.png"))); // NOI18N
        lStop.setToolTipText("Stop");
        lStop.setMaximumSize(new java.awt.Dimension(22, 22));
        lStop.setMinimumSize(new java.awt.Dimension(22, 22));
        lStop.setPreferredSize(new java.awt.Dimension(22, 22));
        lStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lStopMouseClicked(evt);
            }
        });

        lAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/add.png"))); // NOI18N
        lAdd.setToolTipText("Add Subtitle");
        lAdd.setMaximumSize(new java.awt.Dimension(22, 22));
        lAdd.setMinimumSize(new java.awt.Dimension(22, 22));
        lAdd.setPreferredSize(new java.awt.Dimension(22, 22));
        lAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lAddMouseClicked(evt);
            }
        });

        lDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/delete.png"))); // NOI18N
        lDelete.setToolTipText("Delete Subtitle");
        lDelete.setMaximumSize(new java.awt.Dimension(22, 22));
        lDelete.setMinimumSize(new java.awt.Dimension(22, 22));
        lDelete.setPreferredSize(new java.awt.Dimension(22, 22));
        lDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lDeleteMouseClicked(evt);
            }
        });

        lStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/start.png"))); // NOI18N
        lStart.setToolTipText("Start Time");
        lStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lStartMouseClicked(evt);
            }
        });

        lEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/end.png"))); // NOI18N
        lEnd.setToolTipText("End Time");
        lEnd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lEndMouseClicked(evt);
            }
        });

        jLabel1.setText("Start");

        tStart.setToolTipText("Start Time");

        jLabel2.setText("End");

        tEnd.setToolTipText("End Time");

        tSub.setColumns(20);
        tSub.setRows(5);
        tSub.setToolTipText("Subtitle");
        jScrollPane1.setViewportView(tSub);

        lCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/cancel.png"))); // NOI18N
        lCancel.setToolTipText("Cancel");
        lCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lCancelMouseClicked(evt);
            }
        });

        lSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/save.png"))); // NOI18N
        lSave.setToolTipText("Save Subtitle");
        lSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lSaveMouseClicked(evt);
            }
        });

        cMusic.setToolTipText("Music");
        cMusic.setMaximumSize(new java.awt.Dimension(25, 25));
        cMusic.setMinimumSize(new java.awt.Dimension(25, 25));
        cMusic.setPreferredSize(new java.awt.Dimension(25, 25));

        lMusic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/music.png"))); // NOI18N
        lMusic.setToolTipText("Music");
        lMusic.setMaximumSize(new java.awt.Dimension(22, 25));
        lMusic.setMinimumSize(new java.awt.Dimension(22, 25));
        lMusic.setPreferredSize(new java.awt.Dimension(22, 25));
        lMusic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lMusicMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pControlLayout = new javax.swing.GroupLayout(pControl);
        pControl.setLayout(pControlLayout);
        pControlLayout.setHorizontalGroup(
            pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addGroup(pControlLayout.createSequentialGroup()
                        .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tStart)
                            .addComponent(tEnd)))
                    .addGroup(pControlLayout.createSequentialGroup()
                        .addComponent(lPlay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lEnd))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pControlLayout.createSequentialGroup()
                        .addComponent(cMusic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lMusic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lCancel)))
                .addContainerGap())
        );
        pControlLayout.setVerticalGroup(
            pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pControlLayout.createSequentialGroup()
                .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pControlLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cMusic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pControlLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lPlay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lStart)
                                .addComponent(lEnd)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lCancel)
                            .addComponent(lSave)
                            .addGroup(pControlLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(lMusic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pSubtitle.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        pSubtitle.setPreferredSize(new java.awt.Dimension(400, 100));

        tabSub.setModel(model);
        TableColumn column;
        for (int i = 0; i < 4; i++) {
            column = tabSub.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(5);
            }
            else if (i == 3) {
                column.setPreferredWidth(185);
            } else {
                column.setPreferredWidth(55);
            }
        }
        tabSub.setToolTipText("Subtitle List");
        tabSub.getTableHeader().setReorderingAllowed(false);
        tabSub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabSubMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabSub);

        lOpenFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/openfile.png"))); // NOI18N
        lOpenFile.setToolTipText("Open Media File");
        lOpenFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lOpenFileMouseClicked(evt);
            }
        });

        lOpenLibrary.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/openlibrary.png"))); // NOI18N
        lOpenLibrary.setToolTipText("Open Library Folder");
        lOpenLibrary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lOpenLibraryMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pSubtitleLayout = new javax.swing.GroupLayout(pSubtitle);
        pSubtitle.setLayout(pSubtitleLayout);
        pSubtitleLayout.setHorizontalGroup(
            pSubtitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSubtitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pSubtitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(pSubtitleLayout.createSequentialGroup()
                        .addComponent(lOpenFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lOpenLibrary)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pSubtitleLayout.setVerticalGroup(
            pSubtitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSubtitleLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pSubtitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lOpenFile, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lOpenLibrary, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        pbPlayer.setToolTipText("Seekbar");
        pbPlayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbPlayerMouseClicked(evt);
            }
        });

        lTime.setText("00:00:00,000");
        lTime.setToolTipText("Time Elapsed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pbPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pSubtitle, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pSubtitle, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lPlayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPlayMouseClicked
        if (player.isPlayable()) {
            if (player.isPlaying()) {
                player.pause();
                lPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/play.png")));
            } else {
                player.play();
                lPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/pause.png")));
            }
        } else {
            player.playMedia(MEDIA_FILE_PATH);
            lPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/pause.png")));

            // Empty model then fill from .srt
            while (!model.isEmpty()) {
                model.removeRow(0);
            }

            File mediaFile = new File(MEDIA_FILE_PATH);
            String srtPath = mediaFile.getPath().replaceFirst("[.][^.]+$", "") + ".srt";
            File text = new File(srtPath);
            if (text.exists()) {
                loadSRT(text);
            }

            // Wait for 2 seconds so we can get length of media
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }

            // Set progress bar's maximum then update seek bar's length every 27 ms
            pbPlayer.setMaximum((int) player.getLength());

            Timer timer = new Timer();
            timer.schedule(
                    new UpdateSeekBar(), 0, 27);
        }
    }//GEN-LAST:event_lPlayMouseClicked

    private void lStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lStopMouseClicked
        player.stop();
        lPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/images/play.png")));
        while (!model.isEmpty()) {
            model.removeRow(0);
        }

        tStart.setText("");
        tEnd.setText("");
        tSub.setText("");
        cMusic.setSelected(false);
    }//GEN-LAST:event_lStopMouseClicked

    private void lAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lAddMouseClicked
        tStart.setText("");
        tEnd.setText("");
        tSub.setText("");
    }//GEN-LAST:event_lAddMouseClicked

    private void lStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lStartMouseClicked
        long millis = player.getTime();
        String milli = String.format("%02d:%02d:%02d,%3d",
                TimeUnit.MILLISECONDS.toHours(millis),
                TimeUnit.MILLISECONDS.toMinutes(millis)
                - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)),
                TimeUnit.MILLISECONDS.toSeconds(millis)
                - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)),
                millis % 1000);
        tStart.setText(milli);
    }//GEN-LAST:event_lStartMouseClicked

    private void lEndMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lEndMouseClicked
        long millis = player.getTime();
        String milli = String.format("%02d:%02d:%02d,%02d",
                TimeUnit.MILLISECONDS.toHours(millis),
                TimeUnit.MILLISECONDS.toMinutes(millis)
                - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)),
                TimeUnit.MILLISECONDS.toSeconds(millis)
                - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)),
                millis % 1000);
        tEnd.setText(milli);
    }//GEN-LAST:event_lEndMouseClicked

    private void tabSubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabSubMouseClicked
        tStart.setText(model.getValueAt(tabSub.getSelectedRow(), 1).toString());
        tEnd.setText(model.getValueAt(tabSub.getSelectedRow(), 2).toString());
        tSub.setText(model.getValueAt(tabSub.getSelectedRow(), 3).toString());

        if (evt.getClickCount() == 2) {
            int milli;
            String time[] = tStart.getText().split(":");
            String mil[] = time[2].split(",");
            milli = Integer.valueOf(time[0]) * 3600000
                    + Integer.valueOf(time[1]) * 60000
                    + Integer.valueOf(mil[0]) * 1000
                    + Integer.valueOf(mil[1]);
            player.setTime(milli);
        }
    }//GEN-LAST:event_tabSubMouseClicked

    private void lSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lSaveMouseClicked
        if (tStart.getText().equals("") || tEnd.getText().equals("") || tSub.getText().equals("")) {
            return;
        }

        String sub = tSub.getText();
        String[] subs = sub.split(" ");
        String subP = "";
        if (subs.length >= 14) {
            JOptionPane.showMessageDialog(this, "Save aborted, sentence length is more than 15 words.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (int i = 1; i <= subs.length; i++) {
            if (i % 5 == 0) {
                subP = subP + " " + subs[i - 1] + "\n";
            } else if (i % 5 == 1) {
                subP = subP + subs[i - 1];
            } else {
                subP = subP + " " + subs[i - 1];
            }
        }

        if (cMusic.isSelected()) {
            subP = "<em>♪ " + subP + " ♪</em>";
        }

        if (tabSub.getSelectedRow() == -1) {// Create
            model.addRow(Arrays.asList(model.getRowCount() + 1, tStart.getText(), tEnd.getText(), subP));
        } else {// Update
            model.setValueAt(Arrays.asList(model.getValueAt(tabSub.getSelectedRow(), 0),
                    tStart.getText(), tEnd.getText(), subP), tabSub.getSelectedRow(), 0);
        }

        saveSRT();

        tStart.setText("");
        tEnd.setText("");
        tSub.setText("");
        cMusic.setSelected(false);
    }//GEN-LAST:event_lSaveMouseClicked

    private void lCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lCancelMouseClicked
        tStart.setText("");
        tEnd.setText("");
        tSub.setText("");
        tabSub.clearSelection();
        cMusic.setSelected(false);
    }//GEN-LAST:event_lCancelMouseClicked

    private void lDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lDeleteMouseClicked
        if (tabSub.getSelectedRow() != -1) {
            model.removeRow(tabSub.getSelectedRow());
            tStart.setText("");
            tEnd.setText("");
            tSub.setText("");
            cMusic.setSelected(false);
            saveSRT();
        }
    }//GEN-LAST:event_lDeleteMouseClicked

    private void lOpenFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lOpenFileMouseClicked
        fChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fChooser.showSaveDialog(null);
        if (fChooser.getSelectedFile() == null) {
            return;
        }

        File mediaFile = fChooser.getSelectedFile();
        MEDIA_FILE_PATH = mediaFile.getAbsolutePath();
        setTitle("MiniSub - " + MEDIA_FILE_PATH);
    }//GEN-LAST:event_lOpenFileMouseClicked

    private void lOpenLibraryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lOpenLibraryMouseClicked
        fChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fChooser.showSaveDialog(null);
        if (fChooser.getSelectedFile() == null) {
            return;
        }

        File mediaFile = fChooser.getSelectedFile();
        VLC_INSTALL_PATH = mediaFile.getAbsolutePath();
    }//GEN-LAST:event_lOpenLibraryMouseClicked

    private void pbPlayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbPlayerMouseClicked
        if (!player.isPlayable()) {
            return;
        }

        int mouseX = evt.getX();
        int progressBarVal = (int) Math.round(((double) mouseX / (double) pbPlayer.getWidth()) * pbPlayer.getMaximum());

        pbPlayer.setValue(progressBarVal);
        player.setTime(progressBarVal);
    }//GEN-LAST:event_pbPlayerMouseClicked

    private void lMusicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lMusicMouseClicked
        if (cMusic.isSelected()) {
            cMusic.setSelected(false);
        } else {
            cMusic.setSelected(true);
        }
    }//GEN-LAST:event_lMusicMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });


    }

    public void loadSRT(File text) {
        Scanner scnr;

        try {
            scnr = new Scanner(text);
            String number = "";
            String num = "";
            String sub = "";
            String line;
            String time[];
            String start = "";
            String end = "";

            boolean flag = false;
            boolean add = true;

            while (scnr.hasNextLine()) {
                line = scnr.nextLine();

                if (flag) {
                    sub = sub + line;
                }

                if (line.contains("-->")) { // Time
                    time = line.split(" --> ");
                    start = time[0];
                    end = time[1];
                    num = number;
                    flag = true;
                    add = true;
                }

                if (line.isEmpty()) {
                    if (add) {
                        model.addRow(Arrays.asList(num, start, end, sub));
                        sub = "";
                        add = false;
                    }

                    flag = false;
                }

                number = line;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void saveSRT() {
        BufferedWriter writer = null;
        File mediaFile = new File(MEDIA_FILE_PATH);
        String srtPath = mediaFile.getPath().replaceFirst("[.][^.]+$", "") + ".srt";
        File srtFile = new File(srtPath);
        try {
            writer = new BufferedWriter(new FileWriter(srtFile));

            for (Iterator<List> it = model.data.iterator(); it.hasNext();) {
                List datum = it.next();
                writer.write(datum.get(0) + "\n" + datum.get(1) + " --> " + datum.get(2) + "\n" + datum.get(3) + "\n\n");
            }
        } catch (Exception e) {
        } finally {
            player.setSubTitleFile(srtFile);
            try {
                writer.close();

            } catch (Exception e) {
            }
        }
    }

    public class SubTableModel extends AbstractTableModel {

        private List<String> columnNames = new ArrayList();
        private List<List> data = new ArrayList();

        {
            columnNames.add("#");
            columnNames.add("Start");
            columnNames.add("End");
            columnNames.add("Text");
        }

        public boolean isEmpty() {
            return data.isEmpty();
        }

        public void addRow(List rowData) {
            data.add(rowData);
            fireTableRowsInserted(data.size() - 1, data.size() - 1);
        }

        public void removeRow(int row) {
            data.remove(row);
            fireTableDataChanged();
        }

        @Override
        public int getColumnCount() {
            return columnNames.size();
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public String getColumnName(int col) {
            try {
                return columnNames.get(col);
            } catch (Exception e) {
                return null;
            }
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            data.set(row, (List) value);
            fireTableDataChanged();
            tStart.setText("");
            tEnd.setText("");
            tSub.setText("");
        }

        @Override
        public Object getValueAt(int row, int col) {
            return data.get(row).get(col);
        }

        @Override
        public boolean isCellEditable(int row, int col) {
//            if (col == 0) {
//                return true;
//            }
            return false;
        }

        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
    };

    public class UpdateSeekBar extends TimerTask {

        @Override
        public void run() {
            pbPlayer.setValue((int) player.getTime());

            long millis = player.getTime();
            String milli = String.format("%02d:%02d:%02d,%02d",
                    TimeUnit.MILLISECONDS.toHours(millis),
                    TimeUnit.MILLISECONDS.toMinutes(millis)
                    - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)),
                    TimeUnit.MILLISECONDS.toSeconds(millis)
                    - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)),
                    millis % 1000);

            if (millis > 0) {
                lTime.setText(milli);
            } else {
                lTime.setText("00:00:00,000");
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cMusic;
    private java.awt.Canvas canvas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lAdd;
    private javax.swing.JLabel lCancel;
    private javax.swing.JLabel lDelete;
    private javax.swing.JLabel lEnd;
    private javax.swing.JLabel lMusic;
    private javax.swing.JLabel lOpenFile;
    private javax.swing.JLabel lOpenLibrary;
    private javax.swing.JLabel lPlay;
    private javax.swing.JLabel lSave;
    private javax.swing.JLabel lStart;
    private javax.swing.JLabel lStop;
    private javax.swing.JLabel lTime;
    private javax.swing.JPanel pControl;
    private javax.swing.JPanel pSubtitle;
    private javax.swing.JProgressBar pbPlayer;
    private javax.swing.JTextField tEnd;
    private javax.swing.JTextField tStart;
    private javax.swing.JTextArea tSub;
    private javax.swing.JTable tabSub;
    // End of variables declaration//GEN-END:variables
}
